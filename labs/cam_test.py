import cv2                                       # OpenCV para capturar video en tiempo real y convertir color (BGR ‚Üí RGB)
import time                                      # Para controlar delays entre fotogramas y evitar saturar el stream
from PIL import Image                            # Usado para mostrar el fotograma como imagen RGB en ventana externa

# Direcci√≥n RTSP de la c√°mara (modific√° esta l√≠nea con tus datos reales de usuario, IP y puerto)
rtsp_url = "rtsp://usuario:contrase√±a@IP:PUERTO/stream1"

# Inicializa el objeto de captura con la URL RTSP especificada
cap = cv2.VideoCapture(rtsp_url)

# Verificamos si la conexi√≥n al stream fue exitosa
if not cap.isOpened():
    print("‚ùå No se pudo conectar al stream.")
else:
    print("‚úÖ Stream en vivo. Presion√° Ctrl+C para frenar.")
    
    try:
        # Captura una cantidad definida de frames (en este caso, s√≥lo uno)
        for _ in range(1):                       # Cambiar a mayor valor si quer√©s capturar m√°s de un frame
            ret, frame = cap.read()              # Captura el fotograma actual

            if not ret:
                print("‚ö†Ô∏è No se pudo leer el fotograma.")
                break

            # Convertimos de formato BGR (OpenCV) a RGB (PIL)
            img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Transformamos el array NumPy en imagen PIL para mostrarla
            pil_img = Image.fromarray(img_rgb)
            pil_img.show()                       # Abre una ventana temporal con el frame capturado

            time.sleep(0.1)                      # Espera corta para controlar el refresco del stream

    except KeyboardInterrupt:
        # üõë Permite salir con Ctrl+C de forma limpia
        print("\nüõë Stream detenido manualmente.")

    finally:
        cap.release()                            # Libera el recurso de la c√°mara para no bloquear otras instancias

